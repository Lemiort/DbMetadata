// <auto-generated />
using System;
using DbMetadata.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;

namespace DbMetadata.Migrations
{
    [DbContext(typeof(MetadataContext))]
    [Migration("20180412094224_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DbMetadata.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("OwnerOrganizationOrganizationId");

                    b.HasKey("DepartmentId");

                    b.HasIndex("OwnerOrganizationOrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DbMetadata.Models.DepartmentProperty", b =>
                {
                    b.Property<int>("DepartmentPropertyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("OwnerDepartmentDepartmentId");

                    b.Property<string>("Title");

                    b.Property<string>("Value");

                    b.HasKey("DepartmentPropertyId");

                    b.HasIndex("OwnerDepartmentDepartmentId");

                    b.ToTable("DepartmentProperties");
                });

            modelBuilder.Entity("DbMetadata.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FileDocumentFileId");

                    b.Property<int?>("ProjectId");

                    b.HasKey("DocumentId");

                    b.HasIndex("FileDocumentFileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DbMetadata.Models.DocumentFile", b =>
                {
                    b.Property<int>("DocumentFileId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<int?>("PrevVersionDocumentFileId");

                    b.HasKey("DocumentFileId");

                    b.HasIndex("PrevVersionDocumentFileId");

                    b.ToTable("DocumentFiles");
                });

            modelBuilder.Entity("DbMetadata.Models.Link", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.Property<int>("SourceTaskId");

                    b.Property<int>("TargetTaskId");

                    b.Property<string>("Type");

                    b.HasKey("LinkId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("DbMetadata.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DbMetadata.Models.OrganizationProperty", b =>
                {
                    b.Property<int>("OrganizationPropertyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("OwnerOrganizationOrganizationId");

                    b.Property<string>("Title");

                    b.Property<string>("Value");

                    b.HasKey("OrganizationPropertyId");

                    b.HasIndex("OwnerOrganizationOrganizationId");

                    b.ToTable("OrganizationProperties");
                });

            modelBuilder.Entity("DbMetadata.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("OwnerDepartmentDepartmentId");

                    b.HasKey("ProjectId");

                    b.HasIndex("OwnerDepartmentDepartmentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DbMetadata.Models.ProjectProperty", b =>
                {
                    b.Property<int>("ProjectPropertyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("OwnerProjectProjectId");

                    b.Property<string>("Title");

                    b.Property<string>("Value");

                    b.HasKey("ProjectPropertyId");

                    b.HasIndex("OwnerProjectProjectId");

                    b.ToTable("ProjectProperties");
                });

            modelBuilder.Entity("DbMetadata.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Duration");

                    b.Property<bool>("Editable");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("Open");

                    b.Property<int?>("ParentId");

                    b.Property<decimal>("Progress");

                    b.Property<int>("ProjectId");

                    b.Property<bool>("Readonly");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Text");

                    b.Property<string>("Type");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DbMetadata.Models.Department", b =>
                {
                    b.HasOne("DbMetadata.Models.Organization", "OwnerOrganization")
                        .WithMany("Departments")
                        .HasForeignKey("OwnerOrganizationOrganizationId");
                });

            modelBuilder.Entity("DbMetadata.Models.DepartmentProperty", b =>
                {
                    b.HasOne("DbMetadata.Models.Department", "OwnerDepartment")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerDepartmentDepartmentId");
                });

            modelBuilder.Entity("DbMetadata.Models.Document", b =>
                {
                    b.HasOne("DbMetadata.Models.DocumentFile", "File")
                        .WithMany()
                        .HasForeignKey("FileDocumentFileId");

                    b.HasOne("DbMetadata.Models.Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DbMetadata.Models.DocumentFile", b =>
                {
                    b.HasOne("DbMetadata.Models.DocumentFile", "PrevVersion")
                        .WithMany()
                        .HasForeignKey("PrevVersionDocumentFileId");
                });

            modelBuilder.Entity("DbMetadata.Models.Link", b =>
                {
                    b.HasOne("DbMetadata.Models.Project")
                        .WithMany("Links")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DbMetadata.Models.OrganizationProperty", b =>
                {
                    b.HasOne("DbMetadata.Models.Organization", "OwnerOrganization")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerOrganizationOrganizationId");
                });

            modelBuilder.Entity("DbMetadata.Models.Project", b =>
                {
                    b.HasOne("DbMetadata.Models.Department", "OwnerDepartment")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerDepartmentDepartmentId");
                });

            modelBuilder.Entity("DbMetadata.Models.ProjectProperty", b =>
                {
                    b.HasOne("DbMetadata.Models.Project", "OwnerProject")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerProjectProjectId");
                });

            modelBuilder.Entity("DbMetadata.Models.Task", b =>
                {
                    b.HasOne("DbMetadata.Models.Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
